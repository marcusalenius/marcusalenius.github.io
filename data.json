{
  "firstName": "Marcus",
  "lastName": "Alenius",
  "brief": "I’m a junior at Carnegie Mellon University, where I am studying Artificial Intelligence. I have a deep passion for building innovative solutions and teaching others. My primary interests lie in machine learning, natural language processing, and software engineering.",
  "heroButtons": [
    {
      "id": 0,
      "type": "contact",
      "text": "Contact and Links",
      "modal": {
        "title": "Contact and Links",
        "content": [
          {
            "id": 0,
            "title": "Email",
            "text": "alenius@cmu.edu",
            "link": "mailto:alenius@cmu.edu"
          },
          {
            "id": 1,
            "title": "LinkedIn",
            "text": "linkedin.com/in/marcusalenius",
            "link": "https://www.linkedin.com/in/marcusalenius/"
          },
          {
            "id": 2,
            "title": "GitHub",
            "text": "github.com/marcusalenius",
            "link": "https://github.com/marcusalenius"
          },
          {
            "id": 3,
            "title": "Google Scholar",
            "text": "scholar.google.com/...",
            "link": "https://scholar.google.com/citations?user=fOZk6agAAAAJ"
          }
        ]
      }
    },
    {
      "id": 1,
      "type": "about",
      "text": "More About Me",
      "modal": {
        "title": "About Me",
        "content": {
          "row_0": [
            {
              "id": 0,
              "text" : "Hi again, I’m Marcus Alenius. I am a Swedish American studying Artificial Intelligence at Carnegie Mellon University. I am passionate about creating technology that unlocks our full potential while making it less obtrusive and almost invisible to us."
            },
            {
              "id": 1,
              "text" : "Currently, I serve as a head teaching assistant for CMU’s largest course, a Bloomberg top 5 U.S. computer science class. I am also a published machine learning researcher, having recently co-created a novel LLM-based metric for automated code reviews. My software engineering experience includes internships at Höganäs Borgestad and the McLearn Lab at CMU’s HCII. In my free time, I love working on projects. Take a look at some of them below."
            }
          ],
          "row_1": [
            {
              "id": 0,
              "text" : "Outside of technology, I am passionate about swimming, a sport I have loved my entire life. I am a former Swedish Age Group Champion in the 100 and 200 meters breaststroke. During my freshman year at Carnegie Mellon, I swam on the varsity swim team. For two years, I coached swimmers aged 7–11. Most recently, I announced swim meets in Sundsvall, Sweden, in 2022 and 2024, for which I developed an application to collect live stats for the announcer. In 2024, I also served as one of the announcers for the Swedish Age Group Championships."
            }
          ]
        }
      }
    }
  ],
  "sections": {
    "Projects": {
      "id": 0,
      "cards": [
        {
          "title": "Actordentify",
          "subtitle": "Chrome extension that identifies actors in TV shows",
          "link": "/actordentify"
        }
      ],
      "categories": [
        {
          "title": "AI/ML",
          "projects": []
        },
        {
          "title": "Fullstack",
          "projects": []
        },
        {
          "title": "Computer Systems",
          "projects": [
            {
              "id": 0,
              "title": "Dynamic Memory Allocator",
              "short_title": "Memory Allocator",
              "description": "Custom heap allocator supporting malloc, free, realloc, and calloc functions. Written in C as a segregated free list dynamic memory allocator. This involved analyzing the tradeoffs between throughput and utilization, ultimately achieving a fast design with minimal heap fragmentation. My implementation ranked in the top 8% of my computer systems class at CMU.",
              "post_link": null,
              "github_link": null
            },
            {
              "id": 1,
              "title": "Linux Shell",
              "short_title": "Linux Shell",
              "description": "Wrote my own Linux shell with signal-based job control, supporting foreground and background processes. The shell also features I/O redirection and handling of SIGINT and SIGTSTP signals on foreground jobs. Written in C, the shell employs a safe, resource-efficient design, achieved by reaping terminated processes and protecting against race conditions.",
              "post_link": null,
              "github_link": null
            },
            {
              "id": 2,
              "title": "Multithreaded File System",
              "short_title": "File System",
              "description": "Reengineered a FAT-style file system for full concurrency, creating a multithreaded design using C and pthreads. Implemented a two-pronged synchronization strategy with mutex for system-level synchronization and readers–writer locks for file-level access, which allows exclusive access to each file to be controlled independently. This significantly enhanced system reliability and performance, resolving 100% of race conditions identified by LLVM task graph tooling.",
              "post_link": null,
              "github_link": null
            },
            {
              "id": 3,
              "title": "Web Proxy Server",
              "short_title": "Web Proxy Server",
              "description": "Multithreaded web proxy server forwarding client requests to the server and relaying responses back to the client. Implemented in C using sockets and pthreads, the proxy  features a thread-safe, protocol-independent design that processes multiple HTTP requests concurrently, achieving 100% of performance objectives.",
              "post_link": null,
              "github_link": null
            },
            {
              "id": 4,
              "title": "Cache Memory Simulator",
              "short_title": "Cache Simulator",
              "description": "Command-line tool written in C for simulating the behavior of a hardware cache given memory-access traces. It uses the LRU (least-recently used) replacement policy when choosing which cache line to evict, and follows a write-back, write-allocate policy. Given an arbitrary size and associativity, the number of cache hits, misses, evictions, dirty bytes, and evicted dirty bytes are reported.",
              "post_link": null,
              "github_link": null
            },
            {
              "id": 5,
              "title": "Virtual Machine",
              "short_title": "Virtual Machine",
              "description": "Virtual machine for the C0 and C1 languages, which are safe subsets of C. Influenced by the JVM, it is implemented as a stack machine in C and uses an operand stack, call stack, local variable array, program counter, and constant and function pools. It runs arbitrary C0/C1 code with dynamic safety checks for heap allocation, array accesses, pointer casts and dereferences, and more.",
              "post_link": null,
              "github_link": null
            }
          ]
        }
      ]
    },
    "Experience": {
      "id": 2,
      "cards": [
        {
          "title": "Head Teaching Assistant",
          "organization": "15-112 Fundamentals of CS, CMU",
          "start": "August 2023",
          "end": "Present",
          "location": "Pittsburgh, PA"
        },
        {
          "title": "Software Engineering Intern",
          "organization": "Höganäs Borgestad",
          "start": "June 2024",
          "end": "August 2024",
          "location": "Gävle, Sweden"
        },
        {
          "title": "Research Assistant",
          "organization": "Language Technologies Institute, CMU",
          "start": "May 2024",
          "end": "August 2024",
          "location": "Remote"
        },
        {
          "title": "Software Engineering Intern",
          "organization": "McLearn Lab, HCII CMU",
          "start": "May 2023",
          "end": "August 2023",
          "location": "Pittsburgh, PA"
        }
      ]
    },
    "Publications": {
      "id": 1,
      "cards": [
        {
          "title": "CRScore: Grounding the Evaluation of Code Review Comments in Code Claims and Smells",
          "authors": "Atharva Naik & Marcus Alenius",
          "conference": "Conference",
          "year": "2024",
          "link": ""
        },
        {
          "title": "Community College Information Technology Education: Curriculum Mapping, a Learning Science Framework, and AI Learning Technologies",
          "authors": "Bruce McLaren, Lauren Herckis, Leah Teffera, Lee Branstetter, Carolyn Rose, Majd Sakr, Matthew Kisow, Reis Reis, Michael Rinsem, Marcus Alenius, & Lex Miller",
          "conference": "American Educational Research Association",
          "year": "2024",
          "link": "https://scholar.google.com/citations?view_op=view_citation&hl=en&user=fOZk6agAAAAJ&citation_for_view=fOZk6agAAAAJ:u5HHmVD_uO8C"
        }
      ]
    }
  },
  "posts": {
    "actordentify": {
      "title": "Actordentify",
      "intro": "A Chrome extension that identifies and overlays information about actors in TV shows. Uses Amazon Rekognition and TMDB APIs to identify actors and provide details.",
      "date": "August 2023",
      "links": {
        "github_link": "https://github.com/rwelgosh/ActorRecognizer"
      },
      "youtube_link": null,
      "markdown": "actordentify.md"
    },
    "kenboard": {
      "title": "Kenboard",
      "intro": "A virtual keyboard with a custom typing error correction system. My term project for Carnegie Mellon's 15-112 Fundamentals of Programming and Computer Science. Written in Python using the Kivy app development framework.",
      "date": "April 2023",
      "links": null,
      "youtube_link": "https://www.youtube.com/embed/GL7kLWBDsWU",
      "markdown": "kenboard.md"
    }
  }
}
